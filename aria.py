import os
from typing import List
from utilities import xor_bytes, RoundsToBytes, rotate_bytes

# ARIA constants
Nb = 16  # Block size (in bytes, fixed for ARIA)
Nr = 10  # Key size is 128 bits (16 bytes), 10 rounds

# The Rijndael S-box.
# Source: https://en.wikipedia.org/wiki/Rijndael_S-box
S1 = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# S2 - Predefined in the ARIA specification.
# Source: https://www.math.snu.ac.kr/~jinhong/04Aria.pdf
S2 = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

S1_inversed = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

S2_inversed = [
    0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
    0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
    0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
    0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
    0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
    0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
    0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
    0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
    0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
    0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
    0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
    0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
    0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
    0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
    0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
    0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
]

# Define constants for key schedule and transformation matrices
# CK Constants (Predefined as in ARIA)
CK = [
    b"0x517cc1b727220a94fe12abe8fa9a6ee0",
    b"0x6db14acc9e21c820ff28b1d5ef5de2b0",
    b"0xdb92371d2126e970324977504e8c90e0"
]


def gf_mult(x: int, y: int, mod_polynomial: int = 0x11b) -> int:
    """Perform multiplication in GF(2^8) with a given modulus polynomial."""
    # 0x11b is the irreducible polynomial x^8 + x^4 + x^3 + x + 1
    result = 0
    for _ in range(8):
        if y & 0x01:  # Check if the lowest bit of y is 1
            result ^= x
        x <<= 1
        if x & 0x100:  # Check if x overflows 8 bits
            x ^= mod_polynomial
        y >>= 1
    return result & 0xFF  # Ensure the result is within GF(2^8)


# Key schedule constants
def rotate_left(value: int, shift: int, bit_length: int = 32) -> int:
    """Circular left shift."""
    return ((value << shift) & ((1 << bit_length) - 1)) | (value >> (bit_length - shift))


def substitute_bytes(state: bytes, sbox: List[int]) -> bytes:
    """Substitute bytes using the given S-box."""
    return bytes(sbox[byte] for byte in state)


def diffusion_layer(state: bytes) -> bytes:
    """Apply diffusion layer (matrix multiplication)."""
    x = list(state)
    y = [0] * 16  # Result after applying diffusion
    y[0] = x[3] ^ x[4] ^ x[6] ^ x[8] ^ x[9] ^ x[13] ^ x[14]
    y[1] = x[2] ^ x[5] ^ x[7] ^ x[8] ^ x[9] ^ x[12] ^ x[15]
    y[2] = x[1] ^ x[4] ^ x[6] ^ x[10] ^ x[11] ^ x[12] ^ x[15]
    y[3] = x[0] ^ x[5] ^ x[7] ^ x[10] ^ x[11] ^ x[13] ^ x[14]
    y[4] = x[0] ^ x[2] ^ x[5] ^ x[8] ^ x[11] ^ x[14] ^ x[15]
    y[5] = x[1] ^ x[3] ^ x[4] ^ x[9] ^ x[10] ^ x[14] ^ x[15]
    y[6] = x[0] ^ x[2] ^ x[7] ^ x[9] ^ x[10] ^ x[12] ^ x[13]
    y[7] = x[1] ^ x[3] ^ x[6] ^ x[8] ^ x[11] ^ x[12] ^ x[13]
    y[8] = x[0] ^ x[1] ^ x[4] ^ x[7] ^ x[10] ^ x[13] ^ x[15]
    y[9] = x[0] ^ x[1] ^ x[5] ^ x[6] ^ x[11] ^ x[12] ^ x[14]
    y[10] = x[2] ^ x[3] ^ x[5] ^ x[6] ^ x[8] ^ x[13] ^ x[15]
    y[11] = x[2] ^ x[3] ^ x[4] ^ x[7] ^ x[9] ^ x[12] ^ x[14]
    y[12] = x[1] ^ x[2] ^ x[6] ^ x[7] ^ x[9] ^ x[11] ^ x[12]
    y[13] = x[0] ^ x[3] ^ x[6] ^ x[7] ^ x[8] ^ x[10] ^ x[13]
    y[14] = x[0] ^ x[3] ^ x[4] ^ x[5] ^ x[9] ^ x[11] ^ x[14]
    y[15] = x[1] ^ x[2] ^ x[4] ^ x[5] ^ x[8] ^ x[10] ^ x[15]
    return bytes(y)


# ARIA cipher implementation
class ARIA:
    def __init__(self, key: bytes):
        self.key = key
        self.key_size = len(key)  # 16 bytes (128-bit) key size
        self.rounds = 10  # 128-bit key size, 10 rounds
        self.round_keys = self._generate_round_keys()

    def _F(self, state: bytes, ck: bytes) -> bytes:
        """Core transformation function F."""
        # Pad state to 16 bytes if necessary
        if len(state) != Nb:
            state = state.ljust(Nb, b'\x00')
        if len(ck) != Nb:
            ck = ck.ljust(Nb, b'\x00')

        state = xor_bytes(state, ck)
        state = substitute_bytes(state, S1)
        state = diffusion_layer(state)
        return state

    def _G(self, state: bytes, ck: bytes) -> bytes:
        """G transformation: Linear transformation used in key schedule."""
        # Pad state to 16 bytes if necessary
        if len(state) != Nb:
            state = state.ljust(Nb, b'\x00')
        if len(ck) != Nb:
            ck = ck.ljust(Nb, b'\x00')

        rotated = rotate_bytes(state, 3)
        result = xor_bytes(rotated, ck)
        return result

    def _generate_round_keys(self):
        """Generate round keys using the key schedule process."""
        key_left = self.key[: Nb]  # Key left is set to the leftmost 128 bits of the master key.
        key_right = self.key[Nb:]  # Key right is whatever remains in the master key.
        if len(key_right) != Nb:
            key_right = key_right.ljust(Nb, b'\x00')
        #    W0 = KL,
        #    W1 = FO(W0, CK1) ^ KR,
        #    W2 = FE(W1, CK2) ^ W0,
        #    W3 = FO(W2, CK3) ^ W1.
        #  There are two types of round functions for ARIA.  One is called an
        #    odd round function and is denoted by FO.  It takes as input a pair
        #    (D,RK) of two 128-bit strings and outputs
        #    FO(D,RK) = A(SL1(D ^ RK)).
        #    The other is called an even round function and is denoted by FE.  It
        #    takes as input a pair (D,RK) of two 128-bit strings and outputs
        #    FE(D,RK) = A(SL2(D ^ RK))

        w_0 = self.key[: self.key_size // 2]
        w_1 = self.key[self.key_size // 2:]
        round_keys = []

        for i in range(3):  # Feistel cipher for W0, W1
            w_0 = self._F(w_0, CK[i % len(CK)])
            w_1 = self._G(w_1, CK[(i + 1) % len(CK)])
        round_keys.append(w_0 + w_1)

        #  ek1  = W0 ^(W1 >>> 19),
        #    ek2  = W1 ^(W2 >>> 19),
        #    ek3  = W2 ^(W3 >>> 19),
        #    ek4  = (W0 >>> 19) ^ W3,
        #    ek5  = W0 ^ (W1 >>> 31),
        #    ek6  = W1 ^ (W2 >>> 31),
        #    ek7  = W2 ^ (W3 >>> 31),
        #    ek8  = (W0 >>> 31) ^ W3,
        #    ek9  = W0 ^ (W1 <<< 61),
        #    ek10 = W1 ^ (W2 <<< 61),
        #    ek11 = W2 ^ (W3 <<< 61),
        #    ek12 = (W0 <<< 61) ^ W3,
        #    ek13 = W0 ^ (W1 <<< 31),
        #    ek14 = W1 ^ (W2 <<< 31),
        #    ek15 = W2 ^ (W3 <<< 31),
        #    ek16 = (W0 <<< 31) ^ W3,
        #    ek17 = W0 ^ (W1 <<< 19).
        #    The number of rounds depends on the size of the master key as
        #    follows.
        #         Key size     Number of Rounds
        #          128              12
        #          192              14
        #          256              16
        #  Due to an extra key addition layer in the last round, 12-, 14-, and
        #    16-round algorithms require 13, 15, and 17 round keys, respectively.
        #    Decryption round keys are derived from the encryption round keys.
        #    dk1 = ek{n+1},
        #    dk2 = A(ek{n}),
        #    dk3 = A(ek{n-1}),
        #    ...,
        #    dk{n}= A(ek2),
        #    dk{n+1}= ek1.

        for i in range(self.rounds):  # Generate round keys for all rounds
            w_0 = self._F(w_0, CK[i % len(CK)])
            w_1 = self._G(w_1, CK[(i + 1) % len(CK)])
            round_keys.append(xor_bytes(w_0, w_1))

        return round_keys

    def _substitution_layer(self, state: bytes, round_number: int) -> bytes:
        """Apply the substitution layer."""
        s_box = S1 if round_number % 2 == 1 else S2
        return bytes(s_box[byte] for byte in state)

    def _encrypt_block(self, block: bytes) -> bytes:
        """Encrypt a single 128-bit block."""
        state = xor_bytes(block, self.round_keys[0])
        for round_number in range(1, self.rounds + 1):
            state = self._substitution_layer(state, round_number)
            if round_number != self.rounds:
                state = diffusion_layer(state)
            state = xor_bytes(state, self.round_keys[round_number])
        return state

    def _decrypt_block(self, block: bytes) -> bytes:
        """Decrypt a single 128-bit block."""
        state = xor_bytes(block, self.round_keys[self.rounds])
        for round_number in range(self.rounds, 0, -1):
            state = xor_bytes(state, self.round_keys[round_number - 1])
            if round_number != self.rounds:
                state = diffusion_layer(state)
            state = substitute_bytes(state, S1_inversed if round_number % 2 == 1 else S2_inversed)
        return state

    def encrypt(self, plaintext: bytes) -> bytes:
        """Encrypt plaintext (must be a multiple of 16 bytes)."""
        padding_len = Nb - (len(plaintext) % Nb)
        plaintext += bytes([padding_len] * padding_len)
        return b"".join(self._encrypt_block(plaintext[i:i + Nb])
                        for i in range(0, len(plaintext), Nb))

    def decrypt(self, ciphertext: bytes) -> bytes:
        """Decrypt ciphertext (must be a multiple of 16 bytes)."""
        plaintext = b"".join(self._decrypt_block(ciphertext[i:i + Nb])
                             for i in range(0, len(ciphertext), Nb))

        # Remove padding
        padding_len = plaintext[-1]
        return plaintext[:-padding_len]


# Testing the ARIA implementation
if __name__ == "__main__":
    # Test the diffusion layer with a valid 16-byte input
    test_state = b'\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10'
    try:
        diffused = diffusion_layer(test_state)
        reversed_diffused = diffusion_layer(diffused)  # Should return the original state
        assert reversed_diffused == test_state, "Diffusion layer is not reversible"
        print("Diffusion layer test passed.")
    except ValueError as e:
        print(f"Error: {e}")

    key = b"\x00" * 16  # 128-bit key
    plaintext = b"ARIA TEST DATA!"  # 16 bytes plaintext
    aria = ARIA(key)
    ciphertext = aria.encrypt(plaintext)
    decrypted = aria.decrypt(ciphertext)

    print(f"Plaintext:  {plaintext}")
    print(f"Ciphertext: {ciphertext.hex()}")
    print(f"Decrypted:  {decrypted}")

    # # Test with known input/output pairs
    # test_plaintext = b'\x00' * 16
    # ciphertext = aria.encrypt(test_plaintext)
    # decrypted = aria.decrypt(ciphertext)
    # assert decrypted == test_plaintext, "Decryption does not match plaintext"
